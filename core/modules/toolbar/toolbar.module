<?php

/**
 * @file
 * Administration toolbar for quick access to top level administration items.
 */

/**
 * Implements hook_help().
 */
function toolbar_help($path, $arg) {
  switch ($path) {
    case 'admin/help#toolbar':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Toolbar module displays links to top-level administration menu items and links from other modules at the top of the screen. For more information, see the online handbook entry for <a href="@toolbar">Toolbar module</a>.', array('@toolbar' => 'http://drupal.org/documentation/modules/toolbar')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Displaying administrative links') . '</dt>';
      $output .= '<dd>' . t('The Toolbar module displays a bar containing top-level administrative links across the top of the screen. Below that, the Toolbar module has a <em>drawer</em> section where it displays links provided by other modules, such as the core <a href="@shortcuts-help">Shortcut module</a>. The drawer can be hidden/shown by using the show/hide shortcuts link at the end of the toolbar.', array('@shortcuts-help' => url('admin/help/shortcut'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function toolbar_permission() {
  return array(
    'access toolbar' => array(
      'title' => t('Use the administration toolbar'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function toolbar_theme($existing, $type, $theme, $path) {
  $items['toolbar'] = array(
    'render element' => 'toolbar',
    'template' => 'toolbar',
  );
  return $items;
}

/**
 * Implements hook_page_build().
 *
 * Add admin toolbar to the page_bottom region automatically.
 */
function toolbar_page_build(&$page) {
  $page['page_bottom']['toolbar'] = array(
    '#pre_render' => array('toolbar_pre_render'),
    '#access' => user_access('access toolbar'),
  );
}

/**
 * Provides pre_render function for the toolbar.
 *
 * Since building the toolbar takes some time, it is done just prior to
 * rendering to ensure that it is built only if it will be displayed.
 *
 * @see toolbar_page_build().
 */
function toolbar_pre_render($toolbar) {
  $toolbar = array_merge($toolbar, toolbar_view());
  return $toolbar;
}

/**
 * Implements hook_preprocess_HOOK() for html.tpl.php.
 *
 * Add some page classes, so global page theming can adjust to the toolbar.
 */
function toolbar_preprocess_html(&$vars) {
  if (isset($vars['page']['page_bottom']['toolbar']) && user_access('access toolbar')) {
    $vars['attributes']['class'][] = 'toolbar';
  }
}

/**
 * Implements hook_preprocess_HOOK() for toolbar.tpl.php.
 *
 * Adding the 'overlay-displace-top' class to the toolbar pushes the overlay
 * down, so it appears below the toolbar.
 */
function toolbar_preprocess_toolbar(&$variables) {
  $variables['attributes']['class'][] = "overlay-displace-top";
}

/**
 * Implements hook_system_info_alter().
 *
 * Indicate that the 'page_bottom' region (in which the toolbar will be displayed)
 * is an overlay supplemental region that should be refreshed whenever its
 * content is updated.
 *
 * This information is provided for any module that might need to use it, not
 * just the core Overlay module.
 */
function toolbar_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme') {
    $info['overlay_supplemental_regions'][] = 'page_bottom';
  }
}

/**
 * Builds the admin menu as a structured array ready for drupal_render().
 *
 * @return
 *   Array of links and settings relating to the admin menu.
 */
function toolbar_view() {
  global $user;

  $build = array(
    '#theme' => 'toolbar',
    '#attached'=> array(
      'library' => array(
        array('toolbar', 'drupal.toolbar'),
      ),
    ),
  );
  // Retrieve the admin menu from the database.
  $tree = toolbar_get_menu_tree();
  // Add attributes to the links before rendering.
  toolbar_menu_navigation_links($tree);
  $build['toolbar_menu'] = menu_tree_output($tree);
  // Add a search form element for the jump-to form element.
  $build['toolbar_filter'] = array(
    '#type' => 'search',
    '#attributes' => array(
      'class' => array('filter'),
      'placeholder' => t('Search'),
    ),
  );

  // Add logout & user account links or login link.
  if ($user->uid) {
    $links = array(
      'account' => array(
        'title' => t('Hello <strong>@username</strong>', array('@username' => user_format_name($user))),
        'href' => 'user',
        'html' => TRUE,
        'attributes' => array(
          'title' => t('User account'),
          'class' => array('tab'),
        ),
      ),
      'logout' => array(
        'title' => t('Log out'),
        'href' => 'user/logout',
        'attributes' => array(
          'class' => array('tab'),
        ),
      ),
    );
  }
  else {
     $links = array(
      'login' => array(
        'title' => t('Log in'),
        'href' => 'user',
        'attributes' => array(
          'class' => array('tab'),
        ),
      ),
    );
  }

  $build['toolbar_user'] = array(
    '#theme' => 'links__toolbar_user',
    '#links' => $links,
    '#attributes' => array(
      'id' => 'toolbar-user',
      'class' => array('menu'),
    ),
    '#heading' => array('text' => t('Administrative toolbar user actions'), 'level' => 'h2', 'class' => 'element-invisible'),
  );

  // Build the default toolbar action links.
  $links = array(
    'toolbar_tray_toggle' => array(
      'title' => t('Menu'),
      'href' => '',
      'html' => FALSE,
      'attributes' => array(
        'class' => array('tab', 'toggle', 'toggle-tray'),
        'role' => 'button',
      ),
    ),
    'home' => array(
      'title' => t('Home'),
      'href' => '<front>',
      'html' => FALSE,
      'attributes' => array(
        'title' => t('Home'),
        'class' => array('tab', 'home-link'),
      ),
    ),
  );

  // Toolbar action links.
  $build['toolbar_actions'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array(
      'id' => 'toolbar-actions',
      'class' => array('menu'),
    ),
    '#heading' => array('text' => t('Administrative toolbar actions'), 'level' => 'h2', 'class' => 'element-invisible'),
  );

  // Shortcuts.
  $build['toolbar_shortcuts'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'toolbar-shortcuts',
        'clearfix',
      ),
    ),
  );

  return $build;
}

/**
 * Gets only the top level items below the 'admin' path.
 *
 * @return
 *   An array containing a menu tree of top level items below the 'admin' path.
 */
function toolbar_get_menu_tree() {
  $tree = array();
  $admin_link = db_query('SELECT * FROM {menu_links} WHERE menu_name = :menu_name AND module = :module AND link_path = :path', array(':menu_name' => 'admin', ':module' => 'system', ':path' => 'admin'))->fetchAssoc();
  if ($admin_link) {
    $tree = menu_tree_all_data('management');
  }
  // Return the sub-menus of the management menu root.
  foreach ($tree as $key => $menu) {
    return (!empty($tree[$key]['below'])) ? $tree[$key]['below'] : array();
  }
  return array();
}

/**
 * Generates an array of links from a menu tree array.
 *
 * Based on menu_navigation_links(). Adds path based IDs and icon placeholders
 * to the links.
 *
 * @return
 *   An array of links as defined above.
 */
function toolbar_menu_navigation_links(&$tree) {
  foreach ($tree as $key => $item) {
    // Configure sub-items.
    if (!empty($item['below'])) {
      toolbar_menu_navigation_links($tree[$key]['below']);
    }
    // Make sure we have a path specific ID in place, so we can attach icons
    // and behaviors to the items.
    $tree[$key]['link']['localized_options']['attributes']['id'] = 'toolbar-link-' . str_replace(array('/', '<', '>'), array('-', '', ''), $item['link']['link_path']);
  }
}

/**
 * Checks whether an item is in the active trail.
 *
 * Useful when using a menu generated by menu_tree_all_data() which does
 * not set the 'in_active_trail' flag on items.
 *
 * @return
 *   TRUE when path is in the active trail, FALSE if not.
 *
 * @todo
 *   Look at migrating to a menu system level function.
 */
function toolbar_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths.
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Implements hook_library_info().
 */
function toolbar_library_info() {
  $libraries['drupal.toolbar'] = array(
    'title' => 'Toolbar',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'toolbar') . '/js/toolbar.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'toolbar') . '/css/toolbar.base.css',
      drupal_get_path('module', 'toolbar') . '/css/toolbar.theme.css',
      drupal_get_path('module', 'toolbar') . '/css/toolbar.accordion.css',
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal'),
      array('system', 'drupalSettings'),
      array('system', 'jquery.once'),
      array('system', 'jquery.cookie'),
      array('system', 'jquery.ui.position'),
    ),
  );

  return $libraries;
}
